daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
	gzip on;
	gzip_comp_level 2;
	gzip_min_length 512;
	gzip_proxied any; # Heroku router sends Via header

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;


	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# Must read the body in 5 seconds.
	client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

	server {
		listen <%= ENV["PORT"] %>;
		server_name _;
		keepalive_timeout 5;
		client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

		root /;
        location / {
            try_files $uri $uri/ $uri.html /index.html;
        }
        location ~* \.(?:css|js|jpg|svg)$ {
            expires 30d;
            add_header Cache-Control "public";
        }

        location ~* \.(?:json)$ {
            expires 1d;
            add_header Cache-Control "public";
        }
	}
}

# http {
#     # what times to include
#     include       /etc/nginx/mime.types;
#     # what is the default one
#     default_type  application/octet-stream;

#     # Sets the path, format, and configuration for a buffered log write
#     log_format compression '$remote_addr - $remote_user [$time_local] '
#         '"$request" $status $upstream_addr '
#         '"$http_referer" "$http_user_agent"';

#     server {
#         # listen on port 
#         listen 8080;
#         # save logs here
#         access_log /var/log/nginx/access.log compression;

#         gzip on;
#         gzip_types text/html application/javascript application/json text/css;

#         # where the root here
#         root /;
#         # what file to server as index
#         index index.html;

#         location / {
#             # First attempt to serve request as file, then
#             # as directory, then fall back to redirecting to index.html
#             try_files $uri $uri/ $uri.html /index.html;
#         }

#         location ~* \.(?:css|js|jpg|svg)$ {
#             expires 30d;
#             add_header Cache-Control "public";
#         }

#         location ~* \.(?:json)$ {
#             expires 1d;
#             add_header Cache-Control "public";
#         }
#     }
# }